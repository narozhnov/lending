{"version":3,"sources":["cli.js"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["import { mjml2html, version as V } from './index'\nimport fs from 'fs'\n\nconst capitalize = name => name.charAt(0).toUpperCase() + name.slice(1).toLowerCase().replace(/-/g, '')\n\n/*\n * The version number is the NPM\n * version number. It should be the same as the MJML engine\n */\nexport const version = V\n\n/*\n * Turns a callback style to a Promise style one\n */\nconst promisify = fn =>\n  (...args) =>\n    new Promise((resolve, reject) =>\n      fn(...args.concat((err, ...data) =>\n        err ? reject(err) : resolve(...data))))\n\n/*\n * Minimal Error Handling\n */\nconst error = e => console.log(e.stack ? e.stack : e)\n\n/*\n * Stdin to string buffer\n */\nconst stdinToBuffer = (stream, callback) => {\n  let buffer = ''\n\n  stream.on('data', chunck => {\n    buffer += chunck\n  })\n\n  stream.on('end', () => {\n    callback(null, buffer)\n  })\n}\n\n/*\n * Utility functions\n * write: write to a file\n * read: read a fileexists: ensure the file exists\n */\nconst write     = promisify(fs.writeFile)\nconst read      = promisify(fs.readFile)\nconst exists    = promisify((file, cb) => fs.access(file, fs.R_OK | fs.W_OK, cb))\nconst readStdin = promisify(stdinToBuffer)\n\n/*\n * Render an input promise\n */\nconst render = (bufferPromise, { min, output, stdout }) => {\n  bufferPromise\n    .then(mjml => mjml2html(mjml.toString(), { minify: min }))\n    .then(result => stdout ? process.stdout.write(result) : write(output, result))\n    .catch(error)\n}\n\n/*\n * Turns an MJML input file into a pretty HTML file\n * min: boolean that specify the output format (pretty/minified)\n */\nexport const renderFile = (input, options) => render(exists(input).then(() => read(input)), options)\n\n/**\n * Render based on input stream\n */\nexport const renderStream = options => render(readStdin(process.stdin), options)\n\n/*\n * Watch changes on a specific input file by calling render on each change\n */\nexport const watch = (input, options) =>\n    fs.watchFile(input, () =>\n      renderFile(input, options))\n\n/*\n* Return the code of an MJML component for a given name\n*/\nconst createComponent = (name, ending) => {\n  const lowerName = name.toLowerCase()\n\n  return `\nimport { MJMLColumnElement, elements, registerElement } from 'mjml'\nimport merge from 'lodash/merge'\nimport React, { Component } from 'react'\n\n/*\n * Wrap your dependencies here.\n */\nconst { text: MjText } = elements\n\nconst NAME = '${lowerName}'\n\n@MJMLColumnElement({\n  tagName: 'mj-${lowerName}',\n  content: ' ',\n\n  /*\n   * These are your default css attributes\n   */\n  attributes: {\n    'color': '#424242',\n    'font-family': 'Helvetica',\n    'margin-top': '10px'\n  }\n})\nclass ${name} extends Component {\n\n  /*\n   * Build your styling here\n   */\n  getStyles () {\n    const { mjAttribute, color } = this.props\n\n    return merge({}, this.constructor.baseStyles, {\n      text: {\n      /*\n       * Get the color attribute\n       * Example: <mj-${lowerName} color=\"blue\">content</mj-${lowerName}>\n       */\n        color: mjAttribute('color')\n      }\n    })\n  }\n\n  render () {\n    const css = this.getStyles()\n    const content = 'Hello World!'\n\n    return (\n      <MjText style={ css }>\n        { content }\n      </MjText>\n    )\n  }\n\n}\n\nregisterElement('${lowerName}', ${name}${ending ? ', { endingTag: true }' : ''})\n\nexport default ${name}\n`\n}\n\n/*\n * Create a new component based on the default template\n */\nexport const initComponent = (name, ending) =>\n  write(`./${capitalize(name)}.js`, createComponent(capitalize(name), ending))\n    .then(() => console.log(`Component created: ${capitalize(name)}`))\n"],"sourceRoot":"/source/"}