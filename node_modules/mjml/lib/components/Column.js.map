{"version":3,"sources":["components/Column.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;;IAQM,iBAHL,2BAAY;AACX,WAAS,WAAT;CADD;YAGK;;;;;;;;;;;;;oMAQJ,SAAS,MAAK,SAAL;;;eARL;;gCAUS;UACH,cAAgB,KAAK,KAAL,CAAhB,YADG;;;AAGX,aAAO,qBAAQ,EAAR,EAAY,KAAK,WAAL,CAAiB,UAAjB,EAA6B;AAC9C,aAAK;AACH,mBAAS,cAAT;AACA,yBAAe,YAAY,gBAAZ,CAAf;AACA,oBAAU,IAAV;AACA,qBAAW,MAAX;AACA,iBAAO,MAAP;SALF;AAOA,eAAO;AACL,yBAAe,YAAY,gBAAZ,CAAf;AACA,sBAAY,YAAY,kBAAZ,CAAZ;SAFF;OARK,CAAP,CAHW;;;;qCAkBK;mBACiB,KAAK,KAAL,CADjB;UACR,iCADQ;UACK,yBADL;;AAEhB,UAAM,QAAQ,YAAY,OAAZ,CAAR,CAFU;;AAIhB,UAAI,SAAS,SAAT,EAAoB;AACtB,kCAAwB,SAAS,MAAM,OAAN,CAAjC,CADsB;OAAxB;;yBAIqC,8BAAY,KAAZ,EARrB;;UAQD,2BAAP,MARQ;UAQY,yBARZ;;;AAUhB,cAAQ,IAAR;AACE,aAAK,GAAL;AACE,oCAAwB,WAAxB,CADF;;AADF,aAIO,IAAL,CAJF;AAKE;AACE,mCAAuB,WAAvB,CADF;AALF,OAVgB;;;;6BAoBR;oBACmC,KAAK,KAAL,CADnC;UACA,kCADA;UACa,4BADb;UACuB,0BADvB;;AAER,UAAM,QAAQ,YAAY,OAAZ,KAAyB,MAAM,OAAN,CAF/B;AAGR,UAAM,gBAAgB,KAAK,cAAL,EAAhB,CAHE;;AAKR,aACE;;;AACE,6BAAiB,aAAjB;AACA,qBAAW,aAAX;AACA,+BAAmB,SAAS,KAAT,CAAnB;AACA,iCAAqB,KAAK,MAAL,CAAY,GAAZ,CAAgB,aAAhB;AACrB,iBAAO,KAAK,MAAL,CAAY,GAAZ,EALT;QAME;;;AACE,yBAAY,GAAZ;AACA,yBAAY,GAAZ;AACA,sCAAwB,YAAY,YAAZ,CAAxB;AACA,kCAAmB,GAAnB;AACA,mBAAO,KAAK,MAAL,CAAY,KAAZ;AACP,mBAAM,MAAN,EANF;UAOE;;;YACG,QADH;WAPF;SANF;OADF,CALQ;;;;SAhDN;6BAEG,aAAa;AAClB,OAAK;AACH,mBAAe,KAAf;GADF;;kBA0EW","file":"components/Column.js","sourcesContent":["import _ from 'lodash'\nimport { widthParser } from '../helpers/mjAttribute'\nimport MJMLElement from './decorators/MJMLElement'\nimport React, { Component } from 'react'\n\n/**\n * Columns are the basic containers for your content. They must be located under mj-section tags in order to be considered by the engine\n */\n@MJMLElement({\n  tagName: 'mj-column'\n})\nclass Column extends Component {\n\n  static baseStyles = {\n    div: {\n      verticalAlign: 'top'\n    }\n  }\n\n  styles = this.getStyles()\n\n  getStyles () {\n    const { mjAttribute } = this.props\n\n    return _.merge({}, this.constructor.baseStyles, {\n      div: {\n        display: 'inline-block',\n        verticalAlign: mjAttribute('vertical-align'),\n        fontSize: '13',\n        textAlign: 'left',\n        width: '100%'\n      },\n      table: {\n        verticalAlign: mjAttribute('vertical-align'),\n        background: mjAttribute('background-color')\n      }\n    })\n  }\n\n  getColumnClass () {\n    const { mjAttribute, sibling } = this.props\n    const width = mjAttribute('width')\n\n    if (width == undefined) {\n      return `mj-column-per-${parseInt(100 / sibling)}`\n    }\n\n    const { width: parsedWidth, unit } = widthParser(width)\n\n    switch (unit) {\n      case '%':\n        return `mj-column-per-${parsedWidth}`\n\n      case 'px':\n      default:\n        return `mj-column-px-${parsedWidth}`\n    }\n  }\n\n  render () {\n    const { mjAttribute, children, sibling } = this.props\n    const width = mjAttribute('width') || (100 / sibling)\n    const mjColumnClass = this.getColumnClass()\n\n    return (\n      <div\n        aria-labelledby={mjColumnClass}\n        className={mjColumnClass}\n        data-column-width={parseInt(width)}\n        data-vertical-align={this.styles.div.verticalAlign}\n        style={this.styles.div}>\n        <table\n          cellPadding=\"0\"\n          cellSpacing=\"0\"\n          data-legacy-background={mjAttribute('background')}\n          data-legacy-border=\"0\"\n          style={this.styles.table}\n          width=\"100%\">\n          <tbody>\n            {children}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n}\n\nexport default Column\n"],"sourceRoot":"/source/"}