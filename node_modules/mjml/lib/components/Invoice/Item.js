'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _merge2 = require('lodash/merge');

var _merge3 = _interopRequireDefault(_merge2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp2;

var _MJMLElement = require('../decorators/MJMLElement');

var _MJMLElement2 = _interopRequireDefault(_MJMLElement);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InvoiceItem = (_dec = (0, _MJMLElement2.default)({
  tagName: 'mj-invoice-item',
  attributes: {
    'color': '#747474',
    'font-family': 'Roboto, Ubuntu, Helvetica, Arial, sans-serif',
    'font-size': '14px',
    'name': '',
    'padding': '10px 20px',
    'price': 0,
    'quantity': 0,
    'text-align': 'left'
  }
}), _dec(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(InvoiceItem, _Component);

  function InvoiceItem() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, InvoiceItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(InvoiceItem)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InvoiceItem, [{
    key: 'getStyles',
    value: function getStyles() {
      var mjAttribute = this.props.mjAttribute;


      var styles = (0, _merge3.default)({}, this.constructor.baseStyles, {
        td: {
          color: mjAttribute('color'),
          fontFamily: mjAttribute('font-family'),
          fontSize: mjAttribute('font-size'),
          padding: mjAttribute('padding'),
          textAlign: mjAttribute('text-align')
        }
      });

      styles.name = (0, _merge3.default)({}, styles.td, styles.name);
      styles.quantity = (0, _merge3.default)({}, styles.td, styles.quantity);

      return styles;
    }
  }, {
    key: 'render',
    value: function render() {
      var mjAttribute = this.props.mjAttribute;


      return _react2.default.createElement(
        'tr',
        null,
        _react2.default.createElement(
          'td',
          { style: this.styles.name },
          mjAttribute('name')
        ),
        _react2.default.createElement(
          'td',
          { style: this.styles.td },
          mjAttribute('price')
        ),
        _react2.default.createElement(
          'td',
          { style: this.styles.quantity },
          mjAttribute('quantity')
        )
      );
    }
  }]);

  return InvoiceItem;
}(_react.Component), _class2.baseStyles = {
  td: {
    fontWeight: 500,
    lineHeight: 1
  },
  name: {
    wordBreak: 'break-all'
  },
  quantity: {
    textAlign: 'right'
  }
}, _temp2)) || _class);
exports.default = InvoiceItem;
//# sourceMappingURL=Item.js.map
