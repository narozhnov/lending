{"version":3,"sources":["helpers/dom.js"],"names":[],"mappings":";;;;;AAAA,IAAM,YAAY,OAAO,MAAP,KAAkB,WAAlB;AAClB,IAAM,MAAM,EAAN;;AAEN,IAAI,SAAJ,EAAe;;AACb,QAAM,SAAS,QAAQ,QAAR,CAAT;;AAEN,QAAM,cAAc,SAAd,WAAc,MAAO;AACzB,UAAM,UAAU,OAAO,GAAP,CAAV,CADmB;;AAGzB,aAAO,oBAAY;AACjB,YAAI,CAAC,QAAD,EAAW;AACb,iBAAO,OAAO,OAAP,CAAP,CADa;SAAf;;AAIA,eAAO,OAAO,QAAP,EAAiB,OAAjB,CAAP,CALiB;OAAZ,CAHkB;KAAP;;AAYpB,QAAI,SAAJ,GAAgB,eAAO;AACrB,UAAM,SAAS,IAAI,SAAJ,EAAT,CADe;;AAGrB,aAAO,YAAY,OAAO,eAAP,CAAuB,GAAvB,EAA4B,WAA5B,CAAZ,CAAP,CAHqB;KAAP;;AAMhB,QAAI,QAAJ,GAAe,eAAO;AACpB,UAAI,OAAO,GAAP,KAAe,QAAf,EAAyB;AAC3B,cAAM,IAAI,SAAJ,CADqB;OAA7B;;AAIA,aAAO,YAAY,OAAO,QAAP,YAAyB,eAAzB,CAAZ,CAAP,CALoB;KAAP;;AAQf,QAAI,aAAJ,GAAoB,mBAAW;AAC7B,UAAM,aAAa,EAAb,CADuB;;AAG7B,YAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,QAAQ,UAAR,CAA3B,CAA+C,OAA/C,CAAuD;eAAa,WAAW,UAAU,IAAV,CAAX,GAA6B,UAAU,KAAV;OAA1C,CAAvD,CAH6B;;AAK7B,aAAO,UAAP,CAL6B;KAAX;;AAQpB,QAAI,WAAJ,GAAkB;aAAW,QAAQ,QAAR;KAAX;;AAElB,QAAI,OAAJ,GAAc,aAAK;AACjB,UAAM,SAAS,IAAI,CAAJ,CAAT,CADW;;AAGjB,4BAAoB,OAAO,OAAP,CAAe,IAAf,SAAuB,OAAO,eAAP,CAAuB,SAAvB,CAH1B;KAAL;OAvCD;CAAf,MA4CO;;AACL,QAAM,UAAU,QAAQ,SAAR,CAAV;AACN,QAAI,IAAI,QAAQ,IAAR,CAAa,EAAb,EAAiB,EAAE,gBAAgB,KAAhB,EAAnB,CAAJ;;AAEJ,QAAM,cAAc,SAAd,WAAc,CAAC,GAAD,EAAM,OAAN,EAAkB;AACpC,UAAI,EAAE,IAAF,CAAO,GAAP,EAAY,OAAZ,CAAJ,CADoC;;AAGpC,aAAO,oBAAY;AACjB,YAAI,CAAC,QAAD,EAAW;AACb,iBAAO,CAAP,CADa;SAAf;;AAIA,eAAO,EAAE,QAAF,CAAP,CALiB;OAAZ,CAH6B;KAAlB;;AAYpB,QAAI,SAAJ,GAAgB;aAAO,YAAY,GAAZ,EAAiB,EAAE,SAAS,KAAT,EAAnB;KAAP;;AAEhB,QAAI,QAAJ,GAAe;aAAO,YAAY,GAAZ,EAAiB,EAAE,SAAS,IAAT,EAAnB;KAAP;;AAEf,QAAI,aAAJ,GAAoB;aAAW,QAAQ,OAAR,IAAmB,EAAnB;KAAX;;AAEpB,QAAI,WAAJ,GAAkB;aAAW,QAAQ,UAAR;KAAX;;AAElB,QAAI,OAAJ,GAAc;aAAK,IAAI,IAAJ;KAAL;OAxBT;CA5CP;;kBAuEe","file":"helpers/dom.js","sourcesContent":["const inBrowser = typeof window !== 'undefined'\nconst dom = {}\n\nif (inBrowser) {\n  const jquery = require('jquery')\n\n  const parseMarkup = str => {\n    const context = jquery(str)\n\n    return selector => {\n      if (!selector) {\n        return jquery(context)\n      }\n\n      return jquery(selector, context)\n    }\n  }\n\n  dom.parseHTML = str => {\n    const parser = new DOMParser()\n\n    return parseMarkup(parser.parseFromString(str, 'text/html'))\n  }\n\n  dom.parseXML = str => {\n    if (typeof str !== 'string') {\n      str = str.outerHTML\n    }\n\n    return parseMarkup(jquery.parseXML(`<root>${str}</root>`))\n  }\n\n  dom.getAttributes = element => {\n    const attributes = {}\n\n    Array.prototype.slice.call(element.attributes).forEach(attribute => attributes[attribute.name] = attribute.value)\n\n    return attributes\n  }\n\n  dom.getChildren = element => element.children\n\n  dom.getHTML = $ => {\n    const markup = $()[0]\n\n    return `<!doctype ${markup.doctype.name}>${markup.documentElement.outerHTML}`\n  }\n} else {\n  const cheerio = require('cheerio')\n  let $ = cheerio.load('', { decodeEntities: false })\n\n  const parseMarkup = (str, options) => {\n    $ = $.load(str, options)\n\n    return selector => {\n      if (!selector) {\n        return $\n      }\n\n      return $(selector)\n    }\n  }\n\n  dom.parseHTML = str => parseMarkup(str, { xmlMode: false })\n\n  dom.parseXML = str => parseMarkup(str, { xmlMode: true })\n\n  dom.getAttributes = element => element.attribs || {}\n\n  dom.getChildren = element => element.childNodes\n\n  dom.getHTML = $ => $().html()\n}\n\nexport default dom\n"],"sourceRoot":"/source/"}