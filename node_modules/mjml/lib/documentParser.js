'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _MJMLElementsCollection = require('./MJMLElementsCollection');

var _Error = require('./Error');

var _dom = require('./helpers/dom');

var _dom2 = _interopRequireDefault(_dom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Avoid htmlparser to parse ending tags
 */
var safeEndingTags = function safeEndingTags(content) {
  _MJMLElementsCollection.endingTags.forEach(function (tag) {
    var regex = new RegExp('<' + tag + '([^>]*)>([^]*?)</' + tag + '>', 'gm');
    content = content.replace(regex, '<' + tag + ' $1><!--[CDATA[$2]]--></' + tag + '>');
  });

  return content;
};

/**
 * converts MJML body into a JSON representation
 */
var mjmlElementParser = function mjmlElementParser(elem) {
  if (!elem) {
    throw new _Error.NullElementError('Null element found in mjmlElementParser');
  }

  var tagName = elem.tagName.toLowerCase();
  var attributes = _dom2.default.getAttributes(elem);

  var element = { tagName: tagName, attributes: attributes };

  if (_MJMLElementsCollection.endingTags.indexOf(tagName) !== -1) {
    var $ = _dom2.default.parseXML(elem);
    element.content = $(tagName).html().trim();
  } else {
    var children = _dom2.default.getChildren(elem);
    element.children = children ? (0, _filter3.default)(children, function (child) {
      return child.tagName;
    }).map(mjmlElementParser) : [];
  }

  return element;
};

/**
 * Import an html document containing some mjml
 * returns JSON
 *   - container: the mjml container
 *   - mjml: a json representation of the mjml
 */
var documentParser = function documentParser(content) {
  var body = void 0;

  try {
    var $ = _dom2.default.parseXML(safeEndingTags(content));
    body = $('mj-body');
  } catch (e) {
    throw new _Error.ParseError('Error while parsing the file');
  }

  if (!body) {
    throw new _Error.EmptyMJMLError('No mj-body found in the file');
  }

  return mjmlElementParser(body.get(0));
};

exports.default = documentParser;
//# sourceMappingURL=documentParser.js.map
