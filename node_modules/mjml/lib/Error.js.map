{"version":3,"sources":["Error.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,IAAM,QAAQ,SAAR,KAAQ,CAAC,IAAD,EAAO,IAAP,EAAgB;;AAE5B;cAAa;;AAEX,aAFW,SAEX,CAAa,OAAb,EAAsB;4BAFX,WAEW;;yEAFX,uCAGY,cAAS,UADV;;AAEpB,YAAK,MAAL,GAAc,IAAd,CAFoB;;KAAtB;;WAFW;IAAkB,MAA/B,CAF4B;CAAhB;;;;;;AAed,IAAM,UAAU,SAAV,OAAU,OAAQ;AACtB,SAAO,mBAAW;AAChB,YAAQ,KAAR,oBAA+B,cAAS,OAAxC,EADgB;GAAX,CADe;CAAR;;;;;;AAUT,IAAM,kCAAa,MAAM,YAAN,EAAoB,CAApB,CAAb;;;;;AAKN,IAAM,0CAAiB,MAAM,gBAAN,EAAwB,CAAxB,CAAjB;;;;;AAKN,IAAM,8CAAmB,MAAM,gBAAN,EAAwB,CAAxB,CAAnB;;;;;AAKN,IAAM,kDAAqB,MAAM,oBAAN,EAA4B,CAA5B,CAArB","file":"Error.js","sourcesContent":["\n/*\n * Create a custom Error class\n */\nconst error = (name, code) => {\n\n  return class MJMLError extends Error {\n\n    constructor (message) {\n      super(`[MJMLError] ${name}: ${message}`)\n      this.status = code\n    }\n  }\n}\n\n/*\n * Warnings are printed to stderr\n */\n/* eslint-disable no-unused-vars */\nconst warning = name => {\n  return message => {\n    console.error(`[MJMLWarning] ${name}: ${message}`)\n  }\n}\n/* eslint-enable no-unused-vars */\n\n/*\n * Error while parsing the code with cheerio\n */\nexport const ParseError = error('ParseError', 1)\n\n/*\n * Error when encounter an empty MJML Element that should be filled\n */\nexport const EmptyMJMLError = error('EmptyMJMLError', 2)\n\n/*\n * Triggered when an MJML is anormally null/udefined\n */\nexport const NullElementError = error('EmptyMJMLError', 3)\n\n/*\n * When encounter an unknown MJML Element while transpiling\n */\nexport const UnknownMJMLElement = error('UnknownMJMLElement', 5)\n\n/*\n * TODO: Warnings\n */\n"],"sourceRoot":"/source/"}